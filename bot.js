import TelegramApi from "node-telegram-bot-api";
import cron from "node-cron";

export function botFu() {
	const TOKEN = "6421481723:AAGecmtKjMac1rE9aRD9F3gfuOJ0hc28bsk";

	const bot = new TelegramApi(TOKEN, { polling: true, parse_mode: "HTML" });

	//–û–±—å–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ
	const activeChats = new Map();

	function dailyNotification(chatId, users) {
		//–§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		return cron.schedule(
			"00 11 * * *",
			() => {
				const user = users[Math.floor(Math.random() * users.length)];
				bot.sendMessage(
					chatId,
					`üéâ <b>${user.name}</b> —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ üéâ, –∑–∞–ø–∏—Å—ã–≤–∞–π –∫—Ä—É–∂–æ–∫ ‚≠ï
@${user.username ? user.username : "–£ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç username"}`,
					{ parse_mode: "HTML" }
				);
			},
			{
				scheduled: false,
			}
		);
	}

	bot.setMyCommands([
		{
			command: "/start",
			description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
		},
		{
			command: "/whatismyname",
			description: "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç",
		},
		{
			command: "/ontimetotalk",
			description: "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–∂–∫–µ",
		},
		{
			command: "/offtimetotalk",
			description: "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–∂–∫–µ",
		},
	]);

	bot.on("message", async (msg) => {
		const text = msg.text;
		const chatId = msg.chat.id;
		const name = msg.from.first_name;

		const getUsers = new Promise(function (resolve, reject) {
			//–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ —á–∞—Ç–µ –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤
			const users = [];

			if (/^-/.test(chatId)) {
				bot.getChatAdministrators(chatId)
					.then((data) => {
						data.forEach((item) => {
							if (item.user.is_bot === false)
								users.push({
									name: item.user.first_name,
									username: item.user.username,
								});
						});
					})
					.then(() => {
						resolve(users);
					});
			} else {
				return resolve(users);
			}
		});

		if (text === "/start" || text === "/start@the_gnzd_bot") {
			return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç GNZD`);
		}
		if (text === "/whatismyname" || text === "/whatismyname@the_gnzd_bot") {
			return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${name} üéâ`);
		}
		if (
			text === "/ontimetotalk" ||
			text === "/ontimetotalk@the_gnzd_bot" ||
			text === "/offtimetotalk" ||
			text === "/offtimetotalk@the_gnzd_bot"
		) {
			if (/^-/.test(chatId) !== true) {
				//–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–æ —á–∞—Ç –∏–ª–∏ –Ω–µ—Ç
				bot.sendMessage(chatId, "–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö");
			} else {
				if (
					text === "/ontimetotalk" ||
					text === "/ontimetotalk@the_gnzd_bot"
				) {
					//–î–æ–±–∞–≤–ª—è–µ—Ç –∏ –≤–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
					if (!activeChats.has(chatId)) {
						getUsers
							.then((data) => {
								activeChats.set(
									chatId,
									new dailyNotification(chatId, data)
								);
							})
							.then(() => {
								activeChats.get(chatId).start();

								bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ");
							});
					} else {
						bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ");
					}
				} else if (
					text === "/offtimetotalk" ||
					text === "/offtimetotalk@the_gnzd_bot"
				) {
					//–û—Ç–∫–ª—é—á–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
					if (activeChats.has(chatId)) {
						activeChats.get(chatId).stop();
						activeChats.delete(chatId);

						bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
					} else {
						bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
					}
				}
			}
		}
	});
}
